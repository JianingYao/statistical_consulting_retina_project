midpoints = rep(c(5, 15, 25, 35, 45, 55),
times = 2),
ncensor = c(0, 1, 3, 1, 2, 3, 1, 6, 1, 0, 1, 2),
incidence = pydat$Events/pydat$`Person-Time`)
dat = data.frame(trt=c(rep(0,20),rep(1,20)),
event_time=c(6,8,11,13,16,16,19,21,22,
28,28,29 ,31,35,40,41,41,
59,86,132,6,9,9,10,11,12,
13,17,18,19,19,20,22,24,
28,31,43,48,51,57),
event=c( 1, 1 ,0, 1, 1, 1, 1, 0, 0, 1,
0, 1, 1, 1, 0, 0, 0, 0, 0, 0,
1, 0, 1, 1, 0, 0, 0, 0, 1, 0,
1, 0, 1, 1, 0, 1 ,0 ,1 ,0 ,0))
py = pyears(Surv(event_time, event) ~
tcut(rep(0, length(df$event_time)),
breaks = c(0, 10, 20, 30, 40, 50, 140),
labels = c("1-10", "11-20", "21-30", "31-40","41-50", "51+")) + trt,
data = df,
scale = 1,
data.frame = TRUE)
pydat = py$data
colnames(pydat) = c("Interval", "Treatment", "PersonTime", "n", "Events")
pydat = cbind(pydat,
midpoints = rep(c(5, 15, 25, 35, 45, 55),
times = 2),
ncensor = c(0, 1, 3, 1, 2, 3, 1, 6, 1, 0, 1, 2),
incidence = pydat$Events/pydat$PersonTime)
kable(pydat[,c("Interval","Treatment","PersonTime","n","Events")])
pydat = cbind(pydat,
ProbInt = round((1-pydat$Events/pydat$PersonTime*10),2),
survProb = round(c(cumprod((1-pydat$Events[1:6]/pydat$PersonTime[1:6]*10)),
survFunc = cumprod((1-pydat$Events[7:12]/pydat$PersonTime[7:12]*10))),2))
pydat
dat = data.frame(trt=c(rep(0,20),rep(1,20)),
event_time=c(6,8,11,13,16,16,19,21,22,
28,28,29 ,31,35,40,41,41,
59,86,132,6,9,9,10,11,12,
13,17,18,19,19,20,22,24,
28,31,43,48,51,57),
event=c( 1, 1 ,0, 1, 1, 1, 1, 0, 0, 1,
0, 1, 1, 1, 0, 0, 0, 0, 0, 0,
1, 0, 1, 1, 0, 0, 0, 0, 1, 0,
1, 0, 1, 1, 0, 1 ,0 ,1 ,0 ,0))
py = pyears(Surv(event_time, event) ~
tcut(rep(0, length(df$event_time)),
breaks = c(0, 10, 20, 30, 40, 50, 140),
labels = c("1-10", "11-20", "21-30", "31-40","41-50", "51+")) + trt,
data = df,
scale = 1,
data.frame = TRUE)
pydata = py$data
colnames(pydata) = c("Interval", "Treatment", "PersonTime", "n", "Events")
pydata = cbind(pydat,
midpoints = rep(c(5, 15, 25, 35, 45, 55),
times = 2),
ncensor = c(0, 1, 3, 1, 2, 3, 1, 6, 1, 0, 1, 2),
incidence = pydat$Events/pydat$PersonTime)
kable(pydata[,c("Interval","Treatment","PersonTime","n","Events")])
pydata = cbind(pydata,
ProbInt = round((1-pydat$Events/pydat$PersonTime*10),2),
survProb = round(c(cumprod((1-pydat$Events[1:6]/pydat$PersonTime[1:6]*10)),
survFunc = cumprod((1-pydat$Events[7:12]/pydat$PersonTime[7:12]*10))),2))
kable(pydata)
pydat$time_sp1 = ifelse(pydat$midpoints > 20, pydat$midpoints - 20, 0)
pydat$time_sp2 = ifelse(pydat$midpoints > 40, pydat$midpoints - 40, 0)
fit1 = glm(event ~ treat + midpoints, family = "poisson",
offset = log(ptime), data = pydat)
pydat$time_sp1 = ifelse(pydat$midpoints > 20, pydat$midpoints - 20, 0)
pydat$time_sp2 = ifelse(pydat$midpoints > 40, pydat$midpoints - 40, 0)
fit1 = glm(event ~ treat + midpoints, family = "poisson",
offset = log(ptime), data = pydat)
pydata$time_sp1 = ifelse(pydat$midpoints > 20, pydata$midpoints - 20, 0)
pydata$time_sp2 = ifelse(pydat$midpoints > 40, pydata$midpoints - 40, 0)
fit1 = glm(event ~ treat + midpoints, family = "poisson",
offset = log(ptime),
data = pydata)
pydata$time_sp1 = ifelse(pydata$midpoints > 20, pydata$midpoints - 20, 0)
pydata$time_sp2 = ifelse(pydata$midpoints > 40, pydata$midpoints - 40, 0)
fit1 = glm(event ~ treat + midpoints, family = "poisson",
offset = log(ptime),
data = pydata)
pydata$time_sp1 = ifelse(pydata$midpoints > 20, pydata$midpoints - 20, 0)
pydata$time_sp2 = ifelse(pydata$midpoints > 40, pydata$midpoints - 40, 0)
fit1 = glm(event ~ treat + midpoints, family = "poisson",
offset = log(ptime),
data = pydata)
pydata$time_sp1 = ifelse(pydata$midpoints > 20, pydata$midpoints - 20, 0)
pydata$time_sp2 = ifelse(pydata$midpoints > 40, pydata$midpoints - 40, 0)
fit1 = glm(Events ~ treat + midpoints, family = "poisson",
offset = log(ptime),
data = pydata)
pydata$time_sp1 = ifelse(pydata$midpoints > 20, pydata$midpoints - 20, 0)
pydata$time_sp2 = ifelse(pydata$midpoints > 40, pydata$midpoints - 40, 0)
fit1 = glm(Events ~ Treatment + midpoints, family = "poisson",
offset = log(ptime),
data = pydata)
pydata$time_sp1 = ifelse(pydata$midpoints > 20, pydata$midpoints - 20, 0)
pydata$time_sp2 = ifelse(pydata$midpoints > 40, pydata$midpoints - 40, 0)
fit1 = glm(Events ~ Treatment + midpoints, family = "poisson",
offset = log(PersonTime),
data = pydata)
fit1p = glm(Events ~ Treatment + midpoints,
family = "quasipoisson",
offset = log(PersonTime),
data = pydata)
fit2 = glm(Events ~ Treatment + midpoints + time_sp1 + time_sp2,
family = "poisson",
offset = log(PersonTime),
data = pydata)
fit2p = glm(Events ~ Treatment + midpoints + time_sp1 + time_sp2,
family = "quasipoisson",
offset = log(PersonTime),
data = pydata)
fit3 = glm(Events ~ Treatment + factor(midpoints),
family = "poisson",
offset = log(PersonTime),
data = pydata)
fit3p = glm(Events ~ Treatment + factor(midpoints),
family = "quasipoisson",
offset = log(PersonTime),
data = pydata)
RR = exp(c(coef(fit1)[2], coef(fit2)[2], coef(fit3)[2]))
SE = c(coef(summary(fit1))[2, 2], coef(summary(fit2))[2, 2], coef(summary(fit3))[2, 2])
CI_LB = exp(log(RR) - 1.96 * SE)
CI_UB = exp(log(RR) + 1.96 * SE)
df = c(length(coef(fit1))-1, length(coef(fit2))-1, length(coef(fit3))-1)
deviance = c(summary(fit1)$deviance, summary(fit2)$deviance, summary(fit3)$deviance)
AIC = c(AIC(fit1), AIC(fit2), AIC(fit3))
table_fit = cbind(RR, CI_LB, CI_UB, df, deviance, AIC)
rownames(table_fit) = c("Model A", "Model B", "Model C")
table_fit
fit1pint = glm(event ~ treat * midpoints, family = "poisson", offset = log(ptime), data = pydat)
fit1pint = glm(Events ~ Treatment * midpoints,
family = "poisson",
offset = log(PersonTime),
data = pydata)
summary(fit1pint)
anova(fit1p,fit1pint,test="LRT")
fit2int = glm(event ~ treat * (midpoints + time_sp1 + time_sp2), family = "poisson",
offset = log(ptime),
data = pydat)
fit1pint = glm(Events ~ Treatment * midpoints,
family = "poisson",
offset = log(PersonTime),
data = pydata)
summary(fit1pint)
anova(fit1p,fit1pint,test="LRT")
fit2int = glm(Events ~ Treatment * (midpoints + time_sp1 + time_sp2), family = "poisson",
offset = log(PersonTime),
data = pydata)
summary(fit2int)
anova(fit2,fit2int,test="LRT")
reticulate::repl_python()
knitr::opts_chunk$set(echo = TRUE)
reticulate::repl_python()
import zarr
Y
knitr::opts_chunk$set(echo = TRUE)
library(reticulate)
reticulate::repl_python()
reticulate::repl_python()
reticulate::repl_python()
knitr::opts_chunk$set(echo = TRUE)
library(reticulate)
reticulate::repl_python()
py_config()
knitr::opts_chunk$set(echo = TRUE)
library(reticulate)
conda_create("r-reticulate")
knitr::opts_chunk$set(echo = TRUE)
library(reticulate)
conda_create("r-reticulate")
conda clean -i
knitr::opts_chunk$set(echo = TRUE)
library(reticulate)
conda_create("r-reticulate")
install.packages("openssl")
knitr::opts_chunk$set(echo = TRUE)
library(reticulate)
library(openssl)
#conda_create("r-reticulate")
#use_condaenv("r-reticulate")
reticulate::repl_python()
reticulate::repl_python()
knitr::opts_chunk$set(echo = TRUE)
library(reticulate)
library(openssl)
#conda_create("r-reticulate")
#use_condaenv("r-reticulate")
knitr::opts_chunk$set(echo = TRUE)
library(reticulate)
#conda_create("r-reticulate")
repl_python()
BiocManager::install('Bioconductor/BiocBaseUtils')
BiocManager::install('Bioconductor/BiocBaseUtils')
aBiocManager::install('Bioconductor/ZarrExperiment')
BiocManager::install('Bioconductor/ZarrExperiment')
install.packages(c("cli", "curl", "digest", "htmltools", "jsonlite", "rlang", "xfun"))
install.packages(c("cli", "curl", "digest", "htmltools", "jsonlite", "rlang", "xfun"))
install.packages("cli")
install.packages("cli")
source("C:/Users/fuchs/Desktop/Research/xenium_prerelease_jun20_mBrain_replicates/unzip/xenium_prerelease_jun20_mBrain_replicates/mBrain_ff_rep1/testing.R")
install.packages(c("BH", "biostat3", "bit", "bookdown", "broom", "bslib", "cli", "collections", "colorspace", "curl", "data.table", "dbplyr", "digest", "DT", "evaluate", "fansi", "foreign", "formatR", "fs", "future", "gam", "gert", "ggbeeswarm", "ggrepel", "globals", "gower", "gtools", "highr", "htmltools", "htmlwidgets", "httpuv", "installr", "isoband", "jsonlite", "knitr", "languageserver", "lava", "listenv", "locfit", "log4r", "lubridate", "lwgeom", "maptools", "markdown", "MASS", "Matrix", "matrixStats", "modelr", "ncdf4", "nlme", "openssl", "parallelly", "pbapply", "pbkrtest", "pkgbuild", "pkgdown", "pkgload", "plotly", "plyr", "png", "progressr", "purrr", "R.utils", "ragg", "raster", "Rcpp", "RcppArmadillo", "RcppEigen", "RcppTOML", "recipes", "reticulate", "rgeos", "rmarkdown", "RNetCDF", "roxygen2", "RSQLite", "s2", "sass", "Seurat", "SeuratObject", "sf", "shiny", "shinyWidgets", "sp", "spatstat.geom", "spatstat.random", "spData", "stars", "statmod", "stringdist", "stringi", "stringr", "styler", "survival", "svglite", "terra", "testthat", "tidyr", "timeDate", "tinytex", "units", "vctrs", "vroom", "whisker", "wk", "xfun", "XML", "yaml"))
install.packages(c("BH", "biostat3", "bit", "bookdown", "broom", "bslib", "cli", "collections", "colorspace", "curl", "data.table", "dbplyr", "digest", "DT", "evaluate", "fansi", "foreign", "formatR", "fs", "future", "gam", "gert", "ggbeeswarm", "ggrepel", "globals", "gower", "gtools", "highr", "htmltools", "htmlwidgets", "httpuv", "installr", "isoband", "jsonlite", "knitr", "languageserver", "lava", "listenv", "locfit", "log4r", "lubridate", "lwgeom", "maptools", "markdown", "MASS", "Matrix", "matrixStats", "modelr", "ncdf4", "nlme", "openssl", "parallelly", "pbapply", "pbkrtest", "pkgbuild", "pkgdown", "pkgload", "plotly", "plyr", "png", "progressr", "purrr", "R.utils", "ragg", "raster", "Rcpp", "RcppArmadillo", "RcppEigen", "RcppTOML", "recipes", "reticulate", "rgeos", "rmarkdown", "RNetCDF", "roxygen2", "RSQLite", "s2", "sass", "Seurat", "SeuratObject", "sf", "shiny", "shinyWidgets", "sp", "spatstat.geom", "spatstat.random", "spData", "stars", "statmod", "stringdist", "stringi", "stringr", "styler", "survival", "svglite", "terra", "testthat", "tidyr", "timeDate", "tinytex", "units", "vctrs", "vroom", "whisker", "wk", "xfun", "XML", "yaml"))
install.packages("swirl")
install.packages("swirlify")
swirl::install_course("Advanced R Programming")
Manual Installation
library("swirl")
swirl()
Sys.Date()
mean(c(2,4,5))
submit()
boring_function('My first function!')
boring_function()
boring_function
submit()
my_mean(c(4,5,10))
submit()
susbmit()
submit()
remainder(5)
remainder(11,5)
install.packages("nhanesA")
library(nhanesA)
demo13 <- nhanes('DEMO_H')
Demo13 <- nhanesTranslate('DEMO_H', names(demo13), data=demo13)
exam13 <- nhanes('BMX_H')
Exam13 <- nhanesTranslate('BMX_H', names(exam13), data=exam13)
names(Demo13)
names(Exam13)
demo13select <- Demo13[c("SEQN", # Respondent sequence number
"RIDEXPRG", # Pregnancy status at exam
"RIAGENDR", # Gender
"RIDAGEYR", # Age in years at screening
"RIDRETH3")]  # Race/Hispanic origin w/ NH Asian
exam13select <- Exam13[c("SEQN", # Respondent sequence number
"BMXBMI")] # Body Mass Index (kg/m**2)
head(demo13select)
head(exam13select)
merged.data <- merge(demo13select, exam13select,
by = c("SEQN"), all=TRUE)
merged.data <- merge(demo13select, exam13select,
by = c("SEQN"), all=TRUE)
head(merged.data)
dim(merged.data)
merged.data$SEQN <- NULL
require(tableone)
install.packages("tableone")
require(tableone)
tab_nhanes <- CreateTableOne(data=merged.data,
includeNA = TRUE)
print(tab_nhanes,
showAllLevels = TRUE)
final <- merged.data
final <- final[complete.cases(final), ]
dim(merged.data)
dim(final)
summary(merged.data$BMXBMI)
analytic.data1 <- subset(merged.data, !is.na(BMXBMI)) # no missing BMI
dim(analytic.data1)
dim(analytic.data1)
analytic.data1
sum(is.na(analytic.data1))
dim(analytic.data1)
# BMI, BUN.Cr, Adiponectin, Insulin, Leptin, age, gender
data <- read.delim("data_cleaned.txt")
setwd("~/GitHub/statistical_consulting_retina_project/Regression")
# BMI, BUN.Cr, Adiponectin, Insulin, Leptin, age, gender
data <- read.delim("data_cleaned.txt")
dat <- data %>% select(IRB, CSF_NFL_OD, CSF_NFL_OS, age, gender, BMI, BUN.Cr, Adiponectin, Insulin, Leptin, NEFA) %>%
pivot_longer(cols=CSF_NFL_OD:CSF_NFL_OS, names_to="CSF_NFL", values_to="Measure")
library(tidyverse)
library(dplyr)
# BMI, BUN.Cr, Adiponectin, Insulin, Leptin, age, gender
data <- read.delim("data_cleaned.txt")
dat <- data %>% select(IRB, CSF_NFL_OD, CSF_NFL_OS, age, gender, BMI, BUN.Cr, Adiponectin, Insulin, Leptin, NEFA) %>%
pivot_longer(cols=CSF_NFL_OD:CSF_NFL_OS, names_to="CSF_NFL", values_to="Measure")
library(lmerTest)
m1 <- lmer(Measure~(1|IRB)+age+gender+BMI+BUN.Cr+Adiponectin+Insulin+Leptin+NEFA, data=dat)
summary(m1)
# Select predictors
newlist <- c("age","SBP","HbA1c","BUN.Cr","Cholesterol","Ketone","Adiponectin","Leptin","RAGE","NEFA")
met_cor <- cor(data[newlist], use = "pairwise.complete.obs")
corrplot(met_cor, type = "upper", method = "circle")
# Generate Effect size plot for NFL
plot_models(title = "NFL Thickness Values Effect Size for Each Predictor By Region Adjusted by FDR",
model_NFL[[1]], model_NFL[[2]], model_NFL[[3]],
model_NFL[[4]], model_NFL[[5]], model_NFL[[6]],
model_NFL[[7]], model_NFL[[8]], model_NFL[[9]],
dot.size = 1,
spacing = 0.5,
show.values = TRUE,
p.adjust = c("fdr"))
library(tidyverse)
library(dplyr)
# BMI, BUN.Cr, Adiponectin, Insulin, Leptin, age, gender
data <- read.delim("data_cleaned.txt")
dat <- data %>% select(IRB, CSF_NFL_OD, CSF_NFL_OS, age, gender, BMI, BUN.Cr, Adiponectin, Insulin, Leptin, NEFA) %>%
pivot_longer(cols=CSF_NFL_OD:CSF_NFL_OS, names_to="CSF_NFL", values_to="Measure")
library(lmerTest)
m1 <- lmer(Measure~(1|IRB)+age+gender+BMI+BUN.Cr+Adiponectin+Insulin+Leptin+NEFA, data=dat)
summary(m1)
# Select predictors
newlist <- c("age","SBP","HbA1c","BUN.Cr","Cholesterol","Ketone","Adiponectin","Leptin","RAGE","NEFA")
met_cor <- cor(data[newlist], use = "pairwise.complete.obs")
corrplot(met_cor, type = "upper", method = "circle")
library(lmerTest)
library(tidyverse)
library(dplyr)
# BMI, BUN.Cr, Adiponectin, Insulin, Leptin, age, gender
data <- read.delim("data_cleaned.txt")
dat <- data %>% select(IRB, CSF_NFL_OD, CSF_NFL_OS, age, gender, BMI, BUN.Cr, Adiponectin, Insulin, Leptin, NEFA) %>%
pivot_longer(cols=CSF_NFL_OD:CSF_NFL_OS, names_to="CSF_NFL", values_to="Measure")
library(lmerTest)
m1 <- lmer(Measure~(1|IRB)+age+gender+BMI+BUN.Cr+Adiponectin+Insulin+Leptin+NEFA, data=dat)
summary(m1)
# Select predictors
newlist <- c("age","SBP","HbA1c","BUN.Cr","Cholesterol","Ketone","Adiponectin","Leptin","RAGE","NEFA")
met_cor <- cor(data[newlist], use = "pairwise.complete.obs")
corrplot(met_cor, type = "upper", method = "circle")
library(sjPlot)
# Generate Effect size plot for NFL
plot_models(title = "NFL Thickness Values Effect Size for Each Predictor By Region Adjusted by FDR",
model_NFL[[1]], model_NFL[[2]], model_NFL[[3]],
model_NFL[[4]], model_NFL[[5]], model_NFL[[6]],
model_NFL[[7]], model_NFL[[8]], model_NFL[[9]],
dot.size = 1,
spacing = 0.5,
show.values = TRUE,
p.adjust = c("fdr"))
library(tidyverse)
library(dplyr)
# BMI, BUN.Cr, Adiponectin, Insulin, Leptin, age, gender
data <- read.delim("data_cleaned.txt")
dat <- data %>% select(IRB, CSF_NFL_OD, CSF_NFL_OS, age, gender, BMI, BUN.Cr, Adiponectin, Insulin, Leptin, NEFA) %>%
pivot_longer(cols=CSF_NFL_OD:CSF_NFL_OS, names_to="CSF_NFL", values_to="Measure")
library(lmerTest)
m1 <- lmer(Measure~(1|IRB)+age+gender+BMI+BUN.Cr+Adiponectin+Insulin+Leptin+NEFA, data=dat)
summary(m1)
# Select predictors
newlist <- c("age","SBP","HbA1c","BUN.Cr","Cholesterol","Ketone","Adiponectin","Leptin","RAGE","NEFA")
met_cor <- cor(data[newlist], use = "pairwise.complete.obs")
corrplot(met_cor, type = "upper", method = "circle")
library(tidyverse)
library(dplyr)
# BMI, BUN.Cr, Adiponectin, Insulin, Leptin, age, gender
data <- read.delim("data_cleaned.txt")
dat <- data %>% select(IRB, CSF_NFL_OD, CSF_NFL_OS, age, gender, BMI, BUN.Cr, Adiponectin, Insulin, Leptin, NEFA) %>%
pivot_longer(cols=CSF_NFL_OD:CSF_NFL_OS, names_to="CSF_NFL", values_to="Measure")
library(lmerTest)
m1 <- lmer(Measure~(1|IRB)+age+gender+BMI+BUN.Cr+Adiponectin+Insulin+Leptin+NEFA, data=dat)
summary(m1)
# Select predictors
newlist <- c("age","SBP","HbA1c","BUN.Cr","Cholesterol","Ketone","Adiponectin","Leptin","RAGE","NEFA")
met_cor <- cor(data[newlist], use = "pairwise.complete.obs")
corrplot(met_cor, type = "upper", method = "circle")
# Run regressions for NFL
preds <- c("IRB","age","gender","SBP","HbA1c","BUN.Cr","Cholesterol","Ketone","Adiponectin","Leptin","RAGE","NEFA")
cols <- c(1:22, grep("NFL", colnames(data)))
regdata <- data[,cols]
locs <- c("CSF", "SI", "SO", "NI", "NO", "II", "IO", "TI", "TO")
datal <- list()
model_NFL <- list()
CI_NFL <- list()
for (i in 1:length(locs)){
dataw <- cbind(regdata[,preds], regdata[,grep(locs[i], colnames(regdata))])
datal[[i]] <- pivot_longer(dataw, cols=c(tail(colnames(dataw),2)[1],tail(colnames(dataw),2)[2]),
names_to=paste("NFL", locs[i], sep="_"), values_to="Measure") %>% drop_na()
library(lmerTest)
model_NFL[[i]] <- lmer(Measure~(1|IRB)+age+gender+SBP+HbA1c+BUN.Cr+Cholesterol+Ketone+Adiponectin+Leptin+RAGE+NEFA,
data=datal[[i]])
CI_NFL[[i]] <- round(confint(model_NFL[[i]]),3)
}
library(sjPlot)
# Generate Effect size plot for NFL
plot_models(title = "NFL Thickness Values Effect Size for Each Predictor By Region Adjusted by FDR",
model_NFL[[1]], model_NFL[[2]], model_NFL[[3]],
model_NFL[[4]], model_NFL[[5]], model_NFL[[6]],
model_NFL[[7]], model_NFL[[8]], model_NFL[[9]],
dot.size = 1,
spacing = 0.5,
show.values = TRUE,
p.adjust = c("fdr"))
library(tidyverse)
library(dplyr)
# BMI, BUN.Cr, Adiponectin, Insulin, Leptin, age, gender
data <- read.delim("data_cleaned.txt")
dat <- data %>% select(IRB, CSF_NFL_OD, CSF_NFL_OS, age, gender, BMI, BUN.Cr, Adiponectin, Insulin, Leptin, NEFA) %>%
pivot_longer(cols=CSF_NFL_OD:CSF_NFL_OS, names_to="CSF_NFL", values_to="Measure")
library(lmerTest)
m1 <- lmer(Measure~(1|IRB)+age+gender+BMI+BUN.Cr+Adiponectin+Insulin+Leptin+NEFA, data=dat)
summary(m1)
# Select predictors
newlist <- c("age","SBP","HbA1c","BUN.Cr","Cholesterol","Ketone","Adiponectin","Leptin","RAGE","NEFA")
met_cor <- cor(data[newlist], use = "pairwise.complete.obs")
# Run regressions for NFL
preds <- c("IRB","age","gender","SBP","HbA1c","BUN.Cr","Cholesterol","Ketone","Adiponectin","Leptin","RAGE","NEFA")
cols <- c(1:22, grep("NFL", colnames(data)))
regdata <- data[,cols]
locs <- c("CSF", "SI", "SO", "NI", "NO", "II", "IO", "TI", "TO")
datal <- list()
model_NFL <- list()
CI_NFL <- list()
for (i in 1:length(locs)){
dataw <- cbind(regdata[,preds], regdata[,grep(locs[i], colnames(regdata))])
datal[[i]] <- pivot_longer(dataw, cols=c(tail(colnames(dataw),2)[1],tail(colnames(dataw),2)[2]),
names_to=paste("NFL", locs[i], sep="_"), values_to="Measure") %>% drop_na()
library(lmerTest)
model_NFL[[i]] <- lmer(Measure~(1|IRB)+age+gender+SBP+HbA1c+BUN.Cr+Cholesterol+Ketone+Adiponectin+Leptin+RAGE+NEFA,
data=datal[[i]])
CI_NFL[[i]] <- round(confint(model_NFL[[i]]),3)
}
library(sjPlot)
plot_models(title = "NFL Thickness Values Effect Size for Each Predictor By Region Adjusted by FDR",
model_NFL[[5]],
model_NFL[[8]]
dot.size = 1,
plot_models(title = "NFL Thickness Values Effect Size for Each Predictor By Region Adjusted by FDR",
model_NFL[[5]],
model_NFL[[8]],
dot.size = 1,
spacing = 0.5,
show.values = TRUE,
p.adjust = c("fdr"))
plot_models(title = "NFL Thickness Values Effect Size for Each Predictor For NO (Blue) and TI (Red) Regions Adjusted by FDR",
model_NFL[[5]],
model_NFL[[8]],
dot.size = 1,
spacing = 0.5,
show.values = TRUE,
p.adjust = c("fdr"))
plot_models(title = "GCL.IPL Thickness Values Effect Size for Each Predictor By Region Adjusted by FDR",
model_GI[[1]], model_GI[[2]], model_GI[[3]],
model_GI[[4]], model_GI[[5]], model_GI[[6]],
model_GI[[7]], model_GI[[8]], model_GI[[9]],
dot.size = 1,
spacing = 0.5,
show.values = TRUE,
p.adjust = c("fdr"))
# Run regressions for GCL.IPL
cols2 <- c(1:22, grep("GCL.IPL", colnames(data)))
regdata2 <- data[,cols2]
datal2 <- list()
model_GI <- list()
CI_GI <- list()
for (i in 1:length(locs)){
dataw <- cbind(regdata2[,preds], regdata2[,grep(locs[i], colnames(regdata2))])
datal2[[i]] <- pivot_longer(dataw, cols=c(tail(colnames(dataw),2)[1],tail(colnames(dataw),2)[2]),
names_to=paste("GCL_IPL", locs[i], sep="_"), values_to="Measure") %>% drop_na()
library(lmerTest)
model_GI[[i]] <- lmer(Measure~(1|IRB)+age+gender+SBP+HbA1c+BUN.Cr+Cholesterol+Ketone+Adiponectin+Leptin+RAGE+NEFA,
data=datal2[[i]])
CI_GI[[i]] <- round(confint(model_GI[[i]]),3)
}
# Generate Effect size plot for NFL
plot_models(title = "GCL.IPL Thickness Values Effect Size for Each Predictor By Region Adjusted by FDR",
model_GI[[1]], model_GI[[2]], model_GI[[3]],
model_GI[[4]], model_GI[[5]], model_GI[[6]],
model_GI[[7]], model_GI[[8]], model_GI[[9]],
dot.size = 1,
spacing = 0.5,
show.values = TRUE,
p.adjust = c("fdr"))
plot_models(title = "GCL.IPL Thickness Values Effect Size for Each Predictor By Region Adjusted by FDR",
model_GI[[1]], model_GI[[2]], model_GI[[3]],
model_GI[[4]], model_GI[[5]], model_GI[[6]],
model_GI[[7]], model_GI[[8]], model_GI[[9]],
dot.size = 1,
spacing = 0.5,
show.values = FALSE,
p.adjust = c("fdr"))
# Run regressions for GCL.IPL
cols2 <- c(1:22, grep("GCL.IPL", colnames(data)))
regdata2 <- data[,cols2]
# Generate Effect size plot for GCL.IPL
plot_models(title = "GCL.IPL Thickness Values Effect Size for Each Predictor By Region Adjusted by FDR (Every Interval Overlaps With Zero)",
model_GI[[1]], model_GI[[2]], model_GI[[3]],
model_GI[[4]], model_GI[[5]], model_GI[[6]],
model_GI[[7]], model_GI[[8]], model_GI[[9]],
dot.size = 1,
spacing = 0.5,
show.values = FALSE,
p.adjust = c("fdr"))
plot_models(title = "GCL.IPL Thickness Values Effect Size for Each Predictor By Region Adjusted by FDR (Every Interval Overlaps With Zero)",
model_GI[[1]], model_GI[[2]], model_GI[[3]],
model_GI[[4]], model_GI[[5]], model_GI[[6]],
model_GI[[7]], model_GI[[8]], model_GI[[9]],
dot.size = 1,
spacing = 0.5,
show.values = FALSE,
p.adjust = c("fdr"),
show.legend = FALSE)
plot_models(title = "GCL.IPL Thickness Values Effect Size for Each Predictor By Region Adjusted by FDR (Every Interval Overlaps With Zero)",
model_GI[[1]], model_GI[[2]], model_GI[[3]],
model_GI[[4]], model_GI[[5]], model_GI[[6]],
model_GI[[7]], model_GI[[8]], model_GI[[9]],
dot.size = 1,
spacing = 0.5,
show.values = FALSE,
p.adjust = c("fdr"),
show.legend = FALSE)
plot_models(title = "GCL-IPL Thickness Values Effect Size for Each Predictor By Region Adjusted by FDR (Every Interval Overlaps With Zero)",
model_GI[[1]], model_GI[[2]], model_GI[[3]],
model_GI[[4]], model_GI[[5]], model_GI[[6]],
model_GI[[7]], model_GI[[8]], model_GI[[9]],
dot.size = 1,
spacing = 0.5,
show.values = FALSE,
p.adjust = c("fdr"),
show.legend = FALSE)
